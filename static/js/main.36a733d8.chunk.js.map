{"version":3,"sources":["components/home.jsx","components/meme.jsx","App.jsx","index.js"],"names":["home","templates","setMeme","className","map","template","onClick","src","url","alt","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","xyz","success","data","console","log","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAgBeA,EAhBF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACvB,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAUG,KAAI,SAACC,GAAD,OACX,qBAAuBF,UAAU,OAAOG,QAAS,WAC7CJ,EAAQG,IADZ,SAGI,qBAAKF,UAAU,SAAf,SACI,qBAAKI,IAAKF,EAASG,IAAKC,IAAI,OAAON,UAAU,aAJ3CE,EAASK,U,cCqDpBC,EAvDF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QAElB,EAAwBW,mBAAS,CAC7BC,YAAaF,EAAKF,GAClBK,SAAU,YACVC,SAAU,YACVC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAuBA,OACI,mCACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKI,IAAKK,EAAKJ,IAAKC,IAAI,UACxB,qBAAKN,UAAU,QAAf,SAEQ,YAAIiB,MAAMR,EAAKS,YAAYjB,KAAI,SAACkB,EAAGC,GAAJ,OAC3B,uBAAmBC,KAAK,OACpBC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GACP,IAAMC,EAAWV,EAAKD,MACtBW,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnCZ,EAAQ,2BAAKD,GAAN,IAAYD,MAAOW,OALtBL,QAUxB,sBAAKpB,UAAU,UAAf,UACI,wBAAQG,QAlCF,WAElB,IAAIE,EAAG,4DAAwDU,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC4B,EAAKT,GACjBf,GAAG,iBAAce,EAAd,mBAA8BS,EAAIH,SAEzCI,MAAMzB,GAAK0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACtBF,MAAK,SAAAG,IAEkB,IAAhBA,EAAIC,SACJpC,EAAQ,2BAAKU,GAAN,IAAYJ,IAAK6B,EAAIE,KAAK/B,UAG7CgC,QAAQC,IAAIjC,IAqBA,2BACA,wBAAQF,QAAS,WACbJ,EAAQ,OADZ,sCCjBLwC,MAzBf,WAEE,MAAkC7B,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkB0C,EAAlB,KACA,EAAwB9B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KASA,OARA0C,qBAAU,WACRX,MAAM,qCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACK,GACLI,EAAaJ,EAAKA,KAAKM,YAG1B,IAED,mCACE,sBAAK1C,UAAU,MAAf,UACE,6DAEU,OAATS,EAAiB,cAAC,EAAD,CAAMX,UAAWA,EAAWC,QAASA,IACnD,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,UCjBvC4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.36a733d8.chunk.js","sourcesContent":["const home = ({ templates, setMeme }) => {\r\n    return (\r\n        <div className=\"templates\">\r\n            {templates.map((template) => (\r\n                <div key={template.id} className=\"temp\" onClick={() => {\r\n                    setMeme(template);\r\n                }} >\r\n                    <div className=\"images\">\r\n                        <img src={template.url} alt=\"meme\" className=\"image\" />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default home\r\n","import React, { useState } from 'react';\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"IshanJain\",\r\n        password: \"eazyphisy\",\r\n        boxes: []\r\n    });\r\n\r\n    const generateMemes = () => {\r\n\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            url += `&boxes[${index}][text]=${box.text}`;\r\n        })\r\n        fetch(url).then(res => res.json())\r\n            .then(xyz => {\r\n\r\n                if (xyz.success === true) {\r\n                    setMeme({ ...meme, url: xyz.data.url })\r\n                }\r\n            })\r\n        console.log(url);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"meme\">\r\n                <img src={meme.url} alt=\"meme \" />\r\n                <div className=\"input\">\r\n                    {\r\n                        [...Array(meme.box_count)].map((_, index) => (\r\n                            <input key={index} type=\"text\"\r\n                                placeholder={`Meme Caption ${index + 1}`}\r\n                                onChange={(e) => {\r\n                                    const newBoxes = form.boxes;\r\n                                    newBoxes[index] = { text: e.target.value };\r\n                                    setForm({ ...form, boxes: newBoxes })\r\n                                }} />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={generateMemes}>Generate Meme</button>\r\n                    <button onClick={() => {\r\n                        setMeme(null);\r\n                    }}>\r\n                        Choose Template</button>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Meme\r\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Home from './components/home';\nimport Meme from './components/meme';\nfunction App() {\n\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTemplates(data.data.memes);\n\n      });\n  }, []);\n  return (\n    <>\n      <div className=\"App\">\n        <p>Welcome To The Meme-Nation!!</p>\n\n        {meme === null ? (<Home templates={templates} setMeme={setMeme} />)\n          : <Meme meme={meme} setMeme={setMeme} />}\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}